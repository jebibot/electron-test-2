diff --git a/node_modules/app-builder-lib/out/targets/archive.js b/node_modules/app-builder-lib/out/targets/archive.js
index b988fc0..3753a6c 100644
--- a/node_modules/app-builder-lib/out/targets/archive.js
+++ b/node_modules/app-builder-lib/out/targets/archive.js
@@ -114,21 +114,59 @@ function compute7zCompressArgs(format, options = {}) {
     return args;
 }
 exports.compute7zCompressArgs = compute7zCompressArgs;
+function computeZipCompressArgs(options = {}) {
+    let storeOnly = options.compression === "store";
+    // do not deref symlinks
+    const args = ["-q", "-r", "-y"];
+    if (builder_util_1.debug7z.enabled) {
+        args.push("-v");
+    }
+    if (process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL != null) {
+        storeOnly = false;
+        args.push(`-${process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL}`);
+    } else if (!storeOnly) {
+        // https://github.com/electron-userland/electron-builder/pull/3032
+        args.push("-" + (options.compression === "maximum" ? "9" : "7"));
+    }
+    if (options.dictSize != null) {
+        builder_util_1.log.warn({ dictSize: options.dictSize }, "ignoring unsuppported option");
+    }
+    // do not save extra file attributes
+    if (!options.isRegularFile) {
+        args.push("-X");
+    }
+    if (options.method != null) {
+        if (options.method !== "DEFAULT") {
+            builder_util_1.log.warn({ method: options.method }, "ignoring unsuppported option");
+        }
+    } else {
+        args.push("-Z", storeOnly ? "store" : "deflate");
+    }
+    return args;
+}
+exports.computeZipCompressArgs = computeZipCompressArgs;
 // 7z is very fast, so, use ultra compression
 /** @internal */
 async function archive(format, outFile, dirToArchive, options = {}) {
-    const args = compute7zCompressArgs(format, options);
-    // remove file before - 7z doesn't overwrite file, but update
+    let use7z = true;
+    if (process.platform === "darwin" && format === "zip" && dirToArchive.normalize("NFC") !== dirToArchive) {
+        builder_util_1.log.warn({ reason: "7z doesn't support NFD-normalized filenames" }, "using zip");
+        use7z = false;
+    }
+    const args = use7z ? compute7zCompressArgs(format, options) : computeZipCompressArgs(options);
+    // remove file before - 7z and zip doesn't overwrite file, but update
     await (0, fs_1.unlinkIfExists)(outFile);
     args.push(outFile, options.withoutDir ? "." : path.basename(dirToArchive));
     if (options.excluded != null) {
         for (const mask of options.excluded) {
-            args.push(`-xr!${mask}`);
+            args.push(use7z ? `-xr!${mask}` : `-x${mask}`);
         }
     }
     try {
-        await (0, fs_extra_1.chmod)(_7zip_bin_1.path7za, 0o755);
-        await (0, builder_util_1.exec)(_7zip_bin_1.path7za, args, {
+        if (use7z) {
+            await (0, fs_extra_1.chmod)(_7zip_bin_1.path7za, 0o755);
+        }
+        await (0, builder_util_1.exec)(use7z ? _7zip_bin_1.path7za : "zip", args, {
             cwd: options.withoutDir ? dirToArchive : path.dirname(dirToArchive),
         }, builder_util_1.debug7z.enabled);
     }
